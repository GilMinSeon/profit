<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="kr.or.profit.mapper.LessonMapper">
	
	<insert id="insertLesson">
	    <selectKey order="BEFORE" keyProperty="lessonSeq" resultType="String">
			SELECT NVL(MAX(TO_NUMBER(LESSON_SEQ)),0)+1 FROM LESSON
		</selectKey>
		<![CDATA[
			INSERT INTO LESSON
			(	LESSON_SEQ,
				FILE_SEQ,
				COMMON_SEQ,
				LESSON_CATEGORY_SEQ,
				LESSON_TITLE,
				LESSON_TITLE_COMMENT,
				LESSON_BALANCE,
				LESSON_FLEX,
				LESSON_STRONG,
				LESSON_CORE,
				LESSON_INTRO,
				LESSON_PRICE,
				LESSON_PRIVATE_FLAG,
				LESSON_MONTH,
				IN_USER_ID,
				IN_DATE,
				UP_USER_ID,
				UP_DATE
			)
			VALUES (#{lessonSeq, jdbcType=VARCHAR},
					#{fileSeq, jdbcType=VARCHAR},
					'4',
					#{lessonCategorySeq, jdbcType=VARCHAR},
					#{lessonTitle, jdbcType=VARCHAR},
					#{lessonTitleComment, jdbcType=VARCHAR},
					#{lessonBalance, jdbcType=VARCHAR},
					#{lessonFlex, jdbcType=VARCHAR},
					#{lessonStrong, jdbcType=VARCHAR},
					#{lessonCore, jdbcType=VARCHAR},
					#{lessonIntro, jdbcType=VARCHAR},
					#{lessonPrice, jdbcType=VARCHAR},
					'n',
					#{lessonMonth, jdbcType=VARCHAR},
					#{inUserId, jdbcType=VARCHAR},
					sysdate,
					#{upUserId, jdbcType=VARCHAR},
					sysdate)
		]]>
	</insert>
	
	<!-- 강의사진 파일테이블에 추가 -->
	<insert id="insertLessonFile" parameterType="java.util.Map" > 
	     <selectKey order="BEFORE" keyProperty="fileSeq" resultType="String">
			SELECT NVL(MAX(TO_NUMBER(FILE_SEQ)),0)+1 FROM ATTACH_FILE
		</selectKey>
		 <foreach collection="list" item="item" index="index" open="INSERT ALL" close="SELECT * FROM DUAL" separator=" ">
           
         into 
            attach_file
               (
                  file_seq, 
                  file_detail_seq, 
                  file_real_name, 
                  file_save_name, 
                  file_path, 
                  in_user_id, 
                  in_date, 
                  up_user_id, 
                  up_date
               )
         values 
           
           (
             (
                select 
                  NVL(max(to_number(file_seq)),0) + 1 
                 from 
                    attach_file),
                 1, 
                 #{item.fileRealName}, 
                 #{item.fileSaveName}, 
                 #{item.filePath}, 
                 #{item.inUserId}, 
                 sysdate, 
                 #{item.upUserId, jdbcType=VARCHAR}, 
                 sysdate
           )
           
           
       </foreach>
   </insert>
	
    
    
    <!-- 강의 수정하기 -->
    <update id="updateLesson" parameterType="LessonVO">
			UPDATE LESSON
			SET FILE_SEQ = #{fileSeq, jdbcType=VARCHAR},
				LESSON_CATEGORY_SEQ = #{lessonCategorySeq, jdbcType=VARCHAR},
				LESSON_TITLE = #{lessonTitle, jdbcType=VARCHAR},
				LESSON_TITLE_COMMENT = #{lessonTitleComment, jdbcType=VARCHAR},
				LESSON_BALANCE = #{lessonBalance, jdbcType=VARCHAR},
				LESSON_FLEX = #{lessonFlex, jdbcType=VARCHAR},
				LESSON_STRONG = #{lessonStrong, jdbcType=VARCHAR},
				LESSON_CORE = #{lessonCore, jdbcType=VARCHAR},
				LESSON_INTRO = #{lessonIntro, jdbcType=VARCHAR},
				LESSON_PRICE = #{lessonPrice, jdbcType=VARCHAR},
                LESSON_MONTH = #{lessonMonth, jdbcType=VARCHAR},
                UP_USER_ID = #{upUserId, jdbcType=VARCHAR},
                UP_DATE = SYSDATE
            WHERE LESSON_SEQ = #{lessonSeq, jdbcType=VARCHAR}
	</update>
	
    
    
      <!-- 강의  파일 수정하기 -->
    <update id="updateLessonFile" parameterType="LessonVO">

			UPDATE ATTACH_FILE
			SET FILE_REAL_NAME = #{fileRealName, jdbcType=VARCHAR},
			    FILE_SAVE_NAME = #{fileSaveName, jdbcType=VARCHAR},
			    FILE_PATH =#{filePath, jdbcType=VARCHAR},
			    UP_USER_ID=#{upUserId, jdbcType=VARCHAR},
			    UP_DATE = SYSDATE
			WHERE FILE_SEQ =#{fileSeq, jdbcType=VARCHAR}
		
	</update>
    
    
    
	   <!-- 강의 목록조회 --> 
	    
	    <select id="selectLessonList"  resultType="egovMap">	<!--  egovMap :  key 에 대하여 Camel Case 변환하여 super.put-->

			SELECT A.LESSON_SEQ ,A.FILE_SEQ, A.COMMON_SEQ, A.LESSON_CATEGORY_SEQ, 
					CASE
					    WHEN LENGTH(A.LESSON_TITLE) > 20 THEN SUBSTR(A.LESSON_TITLE, 0, 20) || '...'
					    ELSE A.LESSON_TITLE
					    END AS LESSON_TITLE, 
				  	A.LESSON_TITLE_COMMENT, A.LESSON_PRIVATE_FLAG, A.LESSON_INTRO, NVL(A.LESSON_HIT,0) AS LESSON_HIT, A.IN_USER_ID, D.FILE_PATH,D.FILE_SAVE_NAME, E.LESSON_CATEGORY_NAME
				,NVL(B.LESSON_GOOD,0) as LESSON_good,
                    NVL(f.LESSON_BOOK,0) as LESSON_book,
                    NVL(C.LESSON_REPLY,0) as LESSON_reply
                
                FROM LESSON A
				    LEFT OUTER JOIN (SELECT LESSON_SEQ, COUNT(*) AS LESSON_GOOD
				                FROM BOOKGOOD
				                WHERE BOOKGOOD_FLAG='Y' AND BOOKGOOD_GUBUN='G'
				                GROUP BY LESSON_SEQ) B
				ON A.LESSON_SEQ = B.LESSON_SEQ
				    LEFT OUTER JOIN(SELECT LESSON_SEQ,COUNT(*) AS LESSON_REPLY
                                FROM REPLY
                                WHERE REPLY_DEL_FLAG='N'
				                GROUP BY LESSON_SEQ) C
				ON A.LESSON_SEQ = C.LESSON_SEQ
				    LEFT OUTER JOIN (SELECT FILE_SEQ,FILE_PATH,FILE_SAVE_NAME
				                FROM ATTACH_FILE ) D
				ON A.FILE_SEQ = D.FILE_SEQ
				    LEFT OUTER JOIN (SELECT LESSON_CATEGORY_SEQ, LESSON_CATEGORY_NAME
				                FROM LESSON_CATEGORY) E
				ON A.LESSON_CATEGORY_SEQ = E.LESSON_CATEGORY_SEQ
					LEFT OUTER JOIN (SELECT LESSON_SEQ, COUNT(*) AS LESSON_BOOK
										FROM BOOKGOOD
										WHERE BOOKGOOD_FLAG='Y' AND BOOKGOOD_GUBUN='B'
										GROUP BY LESSON_SEQ) F
				ON A.LESSON_SEQ = F.LESSON_SEQ

<!-- 			WHERE 1=1 -->
<!-- 			<if test="searchKeyword != null and searchKeyword != ''"> -->
<!-- 		        <choose> -->
<!-- 		            <when test="searchCondition == 0"> -->
<!-- 						AND	ID LIKE '%' || #{searchKeyword} || '%' -->
<!-- 					</when> -->
<!-- 		            <when test="searchCondition == 1"> -->
<!-- 						AND	NAME LIKE '%' || #{searchKeyword} || '%' -->
<!-- 					</when> -->
<!-- 				</choose> -->
<!-- 			</if> -->
			ORDER BY TO_NUMBER(A.LESSON_SEQ) DESC
<!-- 			LIMIT #{recordCountPerPage} OFFSET #{firstIndex} -->
	</select>
	    
   	
	    
	    <!-- 인기강의 조회 -->
	    
	  <select id="selectTopLessonList"  resultType="egovMap">	<!--  egovMap :  key 에 대하여 Camel Case 변환하여 super.put-->
	    SELECT T.LESSON_SEQ ,T.FILE_SEQ, T.COMMON_SEQ, T.LESSON_CATEGORY_SEQ, T.LESSON_TITLE
				, T.LESSON_TITLE_COMMENT, T.LESSON_PRIVATE_FLAG, T.LESSON_INTRO, T.LESSON_HIT, T.LESSON_GOOD
				, T.IN_DATE, T.LESSON_REPLY, T.FILE_PATH, T.FILE_SAVE_NAME
				, T.LESSON_CATEGORY_NAME
				FROM
				(
				SELECT A.LESSON_SEQ ,A.FILE_SEQ, A.COMMON_SEQ, A.LESSON_CATEGORY_SEQ, 
				CASE
				    WHEN LENGTH(A.LESSON_TITLE) > 20 THEN SUBSTR(A.LESSON_TITLE, 0, 20) || '...'
				    ELSE A.LESSON_TITLE
				    END AS LESSON_TITLE, 
				A.LESSON_TITLE_COMMENT, A.LESSON_PRIVATE_FLAG, A.LESSON_INTRO, TO_NUMBER(A.LESSON_HIT) LESSON_HIT, B.LESSON_GOOD, A.IN_USER_ID, TO_CHAR(A.IN_DATE, 'yyyy-mm-dd') IN_DATE, C.LESSON_REPLY, D.FILE_PATH,D.FILE_SAVE_NAME, E.LESSON_CATEGORY_NAME
				        FROM LESSON A
				            LEFT OUTER JOIN (SELECT LESSON_SEQ, COUNT(*) AS LESSON_GOOD
				                        FROM BOOKGOOD
				                        WHERE BOOKGOOD_FLAG='Y' AND BOOKGOOD_GUBUN='G'
				                        GROUP BY LESSON_SEQ) B
				        ON A.LESSON_SEQ = B.LESSON_SEQ
				            LEFT OUTER JOIN(SELECT LESSON_SEQ,COUNT(*) AS LESSON_REPLY
				                        FROM REPLY
				                        GROUP BY LESSON_SEQ) C
				        ON A.LESSON_SEQ = C.LESSON_SEQ
				            LEFT OUTER JOIN (SELECT FILE_SEQ,FILE_PATH,FILE_SAVE_NAME
				                        FROM ATTACH_FILE ) D
				        ON A.FILE_SEQ = D.FILE_SEQ
				            LEFT OUTER JOIN (SELECT LESSON_CATEGORY_SEQ, LESSON_CATEGORY_NAME
				                        FROM LESSON_CATEGORY) E
				        ON A.LESSON_CATEGORY_SEQ = E.LESSON_CATEGORY_SEQ
				        	
				        
				        order by TO_NUMBER(A.LESSON_HIT) desc
				) T
				where rownum &lt; 4
		</select>
	    
	    
	    
	    <!-- 강의 상세보기 -->
    <select id="selectLessonDetail" resultType="egovMap">

		SELECT A.LESSON_SEQ, A.FILE_SEQ, A.LESSON_CATEGORY_SEQ, A.LESSON_TITLE, A.LESSON_TITLE_COMMENT, A.LESSON_BALANCE, A.LESSON_FLEX, A.LESSON_STRONG,
        A.LESSON_CORE, A.LESSON_INTRO, A.LESSON_PRICE, A.LESSON_MONTH, A.IN_USER_ID, A.IN_DATE, A.UP_USER_ID, A.UP_DATE, B.FILE_SAVE_NAME, B.FILE_REAL_NAME
			FROM LESSON A
			    LEFT OUTER JOIN (SELECT FILE_SEQ, FILE_SAVE_NAME , FILE_REAL_NAME
			                FROM ATTACH_FILE ) B
			ON A.FILE_SEQ = B.FILE_SEQ
			
			WHERE A.LESSON_SEQ= #{lessonSeq, jdbcType=VARCHAR}

	</select>
	
	<!-- 강의 비활성화 -->
    <update id="deleteLesson" parameterType="LessonVO">

			UPDATE LESSON
			SET LESSON_PRIVATE_FLAG = 'Y',
                UP_DATE = SYSDATE
            WHERE LESSON_SEQ = #{lessonSeq, jdbcType=VARCHAR}

	</update>
	
    
    
   	<!-- 상세강의 파일테이블에 추가 -->
	<insert id="insertClassFile" parameterType="java.util.Map" > 
	     <selectKey order="BEFORE" keyProperty="fileSeq" resultType="String">
			SELECT NVL(MAX(TO_NUMBER(FILE_SEQ)),0)+1 FROM ATTACH_FILE
		</selectKey>
		 <foreach collection="list" item="item" index="index" open="INSERT ALL" close="SELECT * FROM DUAL" separator=" ">
           
         into 
            attach_file
               (
                  file_seq, 
                  file_detail_seq, 
                  file_real_name, 
                  file_save_name, 
                  file_path, 
                  in_user_id, 
                  in_date, 
                  up_user_id, 
                  up_date
               )
         values 
           
           (
             (
                select 
                  NVL(max(to_number(file_seq)),0) + 1 
                 from 
                    attach_file),
                 #{item.fileDetailSeq}, 
                 #{item.fileRealName}, 
                 #{item.fileSaveName}, 
                 #{item.filePath}, 
                 #{item.inUserId, jdbcType=VARCHAR}, 
                 sysdate, 
                 #{item.upUserId, jdbcType=VARCHAR}, 
                 sysdate
           )
           
           
       </foreach>
   </insert>
   	
	
	<!-- 상세 강의 등록 -->
	<insert id="insertClass">
	    <selectKey order="BEFORE" keyProperty="lessonDetailSeq" resultType="String">
			SELECT NVL(MAX(TO_NUMBER(LESSON_DETAIL_SEQ)),0)+1 FROM LESSON_DETAIL
		</selectKey>
		<![CDATA[
			INSERT INTO LESSON_DETAIL
			(	LESSON_DETAIL_SEQ,
				LESSON_SEQ,
				FILE_SEQ,
				LESSON_DETAIL_TITLE,
				LESSON_DETAIL_CONTENT,
				IN_USER_ID,
				IN_DATE,
				UP_USER_ID,
				UP_DATE
			)
			VALUES (#{lessonDetailSeq, jdbcType=VARCHAR},
					#{lessonSeq, jdbcType=VARCHAR},
					#{fileSeq, jdbcType=VARCHAR},
					#{lessonDetailTitle, jdbcType=VARCHAR},
					#{lessonDetailContent, jdbcType=VARCHAR},
					#{inUserId, jdbcType=VARCHAR},
					sysdate,
					#{upUserId, jdbcType=VARCHAR},
					sysdate)
		]]>
	</insert>
	
	
	<!-- 상세강의 목록조회 -->
	<select id="selectClassList"  resultType="egovMap">	<!--  egovMap :  key 에 대하여 Camel Case 변환하여 super.put-->

			SELECT A.LESSON_DETAIL_SEQ,
			        A.LESSON_SEQ,
			        A.FILE_SEQ,
			        A.LESSON_DETAIL_TITLE,
			        A.LESSON_DETAIL_CONTENT,
			        A.IN_USER_ID,
			        TO_CHAR(A.IN_DATE,'YYYY-MM-DD') IN_DATE,
			        A.UP_USER_ID,
			        A.UP_DATE,
			        B.FILE_SAVE_NAME,
			        C.LESSON_CATEGORY_NAME
			FROM LESSON_DETAIL A
			LEFT OUTER JOIN(SELECT FILE_SEQ, FILE_SAVE_NAME, FILE_PATH
			                    FROM ATTACH_FILE
			                    WHERE FILE_DETAIL_SEQ='1') B
			    ON A.FILE_SEQ = B.FILE_SEQ
			LEFT OUTER JOIN(SELECT D.LESSON_CATEGORY_NAME,D.LESSON_CATEGORY_SEQ, E.LESSON_SEQ
			                    FROM LESSON_CATEGORY D, LESSON E
			                    WHERE D.LESSON_CATEGORY_SEQ = E.LESSON_CATEGORY_SEQ) C
			    ON A.LESSON_SEQ = C.LESSON_SEQ
			WHERE A.LESSON_SEQ = #{lessonSeq, jdbcType=VARCHAR}
			ORDER BY TO_NUMBER(LESSON_DETAIL_SEQ)
	</select>
	    
    <!-- 상세 강의 디테일 조회 -->
	<select id="selectclassDetail" resultType="egovMap">

		SELECT A.LESSON_DETAIL_SEQ,
		        A.LESSON_SEQ,
		        A.FILE_SEQ,
		        A.LESSON_DETAIL_TITLE,
		        A.LESSON_DETAIL_CONTENT,
		        A.IN_USER_ID,
		        TO_CHAR(A.IN_DATE,'YYYY-MM-DD') IN_DATE,
		        A.UP_USER_ID,
		        A.UP_DATE,
		        B.FILE_SAVE_NAME
		    FROM LESSON_DETAIL A
		    LEFT OUTER JOIN(SELECT FILE_SEQ, FILE_SAVE_NAME 
		                    FROM ATTACH_FILE 
		                    WHERE FILE_DETAIL_SEQ ='2') B
		        ON A.FILE_SEQ = B.FILE_SEQ
		    WHERE LESSON_DETAIL_SEQ = #{lessonDetailSeq, jdbcType=VARCHAR}

	</select>
	
	<!-- 상세 강의 삭제 -->
	<delete id="deleteClass">

			DELETE FROM LESSON_DETAIL
			WHERE LESSON_DETAIL_SEQ =#{lessonDetailSeq}

	</delete>
	
	<select id="selectCateLessonList"  resultType="egovMap" parameterType="String">
	    SELECT A.LESSON_SEQ ,A.FILE_SEQ, A.COMMON_SEQ, A.LESSON_CATEGORY_SEQ, 
					CASE
					    WHEN LENGTH(A.LESSON_TITLE) > 20 THEN SUBSTR(A.LESSON_TITLE, 0, 20) || '...'
					    ELSE A.LESSON_TITLE
					    END AS LESSON_TITLE, 
				  	A.LESSON_TITLE_COMMENT, A.LESSON_PRIVATE_FLAG, A.LESSON_INTRO, NVL(A.LESSON_HIT,0) AS LESSON_HIT, A.IN_USER_ID, D.FILE_PATH,D.FILE_SAVE_NAME, E.LESSON_CATEGORY_NAME
				,NVL(B.LESSON_GOOD,0) as LESSON_good,
                    NVL(f.LESSON_BOOK,0) as LESSON_book,
                    NVL(C.LESSON_REPLY,0) as LESSON_reply
                
                FROM LESSON A
				    LEFT OUTER JOIN (SELECT LESSON_SEQ, COUNT(*) AS LESSON_GOOD
				                FROM BOOKGOOD
				                WHERE BOOKGOOD_FLAG='Y' AND BOOKGOOD_GUBUN='G'
				                GROUP BY LESSON_SEQ) B
				ON A.LESSON_SEQ = B.LESSON_SEQ
				    LEFT OUTER JOIN(SELECT LESSON_SEQ,COUNT(*) AS LESSON_REPLY
                                FROM REPLY
                                WHERE REPLY_DEL_FLAG='N'
				                GROUP BY LESSON_SEQ) C
				ON A.LESSON_SEQ = C.LESSON_SEQ
				    LEFT OUTER JOIN (SELECT FILE_SEQ,FILE_PATH,FILE_SAVE_NAME
				                FROM ATTACH_FILE ) D
				ON A.FILE_SEQ = D.FILE_SEQ
				    LEFT OUTER JOIN (SELECT LESSON_CATEGORY_SEQ, LESSON_CATEGORY_NAME
				                FROM LESSON_CATEGORY) E
				ON A.LESSON_CATEGORY_SEQ = E.LESSON_CATEGORY_SEQ
					LEFT OUTER JOIN (SELECT LESSON_SEQ, COUNT(*) AS LESSON_BOOK
										FROM BOOKGOOD
										WHERE BOOKGOOD_FLAG='Y' AND BOOKGOOD_GUBUN='B'
										GROUP BY LESSON_SEQ) F
				ON A.LESSON_SEQ = F.LESSON_SEQ
            where e.lesson_category_name=#{sel_value}
	    
	    
	    
	</select>
	
</mapper>
